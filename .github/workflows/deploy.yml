name: Medusa CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: "us-east-1"
  ECR_REPO: "medusa-app"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # 1. Checkout code
    - uses: actions/checkout@v4

    # 2. Configure AWS credentials
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 3. Setup Docker and ECR login
    - uses: docker/setup-buildx-action@v2
    - uses: aws-actions/amazon-ecr-login@v2
      id: ecr-login

    # 4. Build and push Docker image
    - name: Build and Push Image
      id: build-image
      run: |
        # Create ECR repo if not exists
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO
        
        # Build and push
        docker buildx build \
          --platform linux/amd64 \
          -t ${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:latest \
          -t ${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:${{ github.sha }} \
          --push .
        echo "image_uri=${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:${{ github.sha }}" >> $GITHUB_OUTPUT

    # 5. Terraform deployment
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform
      env:
        TF_VAR_image_uri: ${{ steps.build-image.outputs.image_uri }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}